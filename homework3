// ***************************************************************
// Saba Syed   
// March 1, 2021
// Task 1 (40 pts). Implement the Quick  Sort algorithm as 
// discussed in Lecture 4.(Hint: use the function checked_sorted
// to check if your output is indeed sorted.)
// Task 2 (40 pts). Implement the Counting Sort algorithm as 
// discussed in Lecture 4.(Hint: use the function checked_sorted
// to check if your outputis indeed sorted.)
// Optional Task 4 (100 pts Extra Credit). Implement the Heap Sort
// algorithm as discussed in Lecture 3.(Hint: use the function 
// checked_sorted to check if your output is indeed sorted. Use 
// the file Sort4.java if you plan to work on this task.)
// ***************************************************************
 
import java.util.*;

public class Sort3 {
   
   // Task 1 Answer
   public static int[] quick_sort (int[] array, int p, int r) {
      if (p < r) {
      int q = partition(array, p, r);
      quick_sort(array, p, q - 1);
      quick_sort(array, q + 1, r);
   }
   return array;
}

   public static int partition (int[] array, int p, int r) {
      int x = array[r]; 
      int i = p - 1; 

      for (int j = p; j < r; j++) {
      if (array[j] <= x) {
      i++;

      int temp = array[i];
      array[i] = array[j];
      array[j] = temp;
   }
}

      int temp = array[i + 1];
      array[i + 1] = array[r];
      array[r] = temp;

   return i + 1;
}

   // Task 2 Answer
   public static int[] counting_sort (int[] array, int k) {

      int [] b = new int [array.length];
      int [] c = new int [k + 1];
      for (int j = 0; j < array.length; j++) {
      c[array[j]] = c[array[j]] + 1;
   }

      for (int i = 1; i <= k; i++) {
      c[i] = c[i] + c[i - 1];
   }


      for (int j = array.length - 1; j >= 0 ; j--) {
      b[c[array[j]] - 1] = array[j];
      c[array[j]] = c[array[j]] - 1;
   }
   return b;
}

   // Extra Credit Task 4
   public static void heap_sort(int array[]) {
      buildMaxHeap(array);
   
      for (int i=array.length -1; i>=0; i--) {
      int temp = array[0];
      array[0] = array[i];
      array[i] = temp;
   
      heapify(array, i, 0);
   }
}

   public static void buildMaxHeap (int array[]) {
      int size = array.length;
      for (int i = size / 2 - 1; i >= 0; i--)
      heapify(array, size, i);
   }
   public static int getLeftChildIndex (int i) {return 2*i + 1;}
   public static int getRightChildIndex (int i) {return 2*i + 2;}
   public static void heapify(int array[], int heapSize, int i) {

      int largest = i; 
      int leftChildIndex = getLeftChildIndex(i);
      int rightChildIndex = getRightChildIndex(i);


      if (leftChildIndex < heapSize && array[leftChildIndex] > array[largest])
      largest = leftChildIndex;


      if (rightChildIndex < heapSize && array[rightChildIndex ] > array[largest])
      largest = rightChildIndex ;

      if (largest != i) {
      int swap = array[i];
      array[i] = array[largest];
      array[largest] = swap;

      heapify(array, heapSize, largest);
   }
}


   public static int[] generate_random_array (int n, int k) {
   List<Integer> list;
   int[] array;
      Random rnd;

   rnd = new Random(System.currentTimeMillis());

   list = new ArrayList<Integer> ();
   for (int i = 1; i <= n; i++)
      list.add(new Integer(rnd.nextInt(k+1)));

   Collections.shuffle(list, rnd);

   array = new int[n];
   for (int i = 0; i < n; i++)
      array[i] = list.get(i).intValue();

   return array;
}

   public static int[] generate_random_array (int n) {
   List<Integer> list;
   int[] array;

   list = new ArrayList<Integer> ();
   for (int i = 1; i <= n; i++)
      list.add(new Integer(i));

   Collections.shuffle(list, new Random(System.currentTimeMillis()));

   array = new int[n];
   for (int i = 0; i < n; i++)
      array[i] = list.get(i).intValue();

   return array;
}


   public static boolean check_sorted (int[] array) {
   for (int i = 1; i < array.length; i++) {
      if (array[i-1] > array[i])
   return false;
}
   return true;
}

   public static void print_array (int[] array) {
      for (int i = 0; i < array.length; i++)
   System.out.print(array[i] + ", ");
   System.out.println();
}

   public static void main(String[] args) {
   // TODO Auto-generated method stub
   int k = 10000;

   System.out.println("Quick sort starts ------------------");
   for (int n = 100000; n <= 1000000; n=n+100000) {
   int[] array = Sort3.generate_random_array(n);
   long t1 = System.currentTimeMillis();
   array = Sort3.quick_sort(array, 0, n-1);
   long t2 = System.currentTimeMillis();
   long t = t2 - t1;
   boolean flag = Sort3.check_sorted(array);
   System.out.println(n + "," + t + "," + flag);
}
   System.out.println("Quick sort ends ------------------");

   System.out.println("Counting sort starts ------------------");
   for (int n = 100000; n <= 1000000; n=n+100000) {
   int[] array = Sort3.generate_random_array(n, k);
   long t1 = System.currentTimeMillis();
   array = Sort3.counting_sort(array, k);
   long t2 = System.currentTimeMillis();
   long t = t2 - t1;
   boolean flag = Sort3.check_sorted(array);
   System.out.println(n + "," + t + "," + flag);
}
   System.out.println("Counting sort ends ------------------");


   // Extra Credit Task 4
   System.out.println("Heap sort starts ------------------");
   for (int n = 100000; n <= 1000000; n=n+100000) {
   int[] array = Sort3.generate_random_array(n);
   long t1 = System.currentTimeMillis();
   Sort3.heap_sort(array);
   long t2 = System.currentTimeMillis();
   long t = t2 - t1;
   boolean flag = Sort3.check_sorted(array);
   System.out.println(n + "," + t + "," + flag);
}
   System.out.println("Heap sort ends ------------------");
}


}



